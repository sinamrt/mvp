{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 73, "column": 0}, "map": {"version":3,"sources":["file:///Users/sina/Desktop/wollie_software/MVP/pages/api/auth/%5B...nextauth%5D.ts"],"sourcesContent":["import NextAuth from \"next-auth\";\nimport GoogleProvider from \"next-auth/providers/google\";\nimport GitHubProvider from \"next-auth/providers/github\";\nimport CredentialsProvider from \"next-auth/providers/credentials\";\nimport type { NextAuthOptions } from \"next-auth\";\nimport { PrismaClient, Prisma } from \"@prisma/client\";\nimport bcrypt from \"bcryptjs\";\n\nconst prisma = new PrismaClient();\n\n// Extend the built-in session types\ndeclare module \"next-auth\" {\n  interface Session {\n    user: {\n      id: string;\n      email: string;\n      name: string;\n      role: string;\n    };\n  }\n  \n  interface User {\n    id: string;\n    email: string;\n    name: string;\n    role: string;\n  }\n}\n\ndeclare module \"next-auth/jwt\" {\n  interface JWT {\n    role: string;\n    sub?: string;\n  }\n}\n\nexport const authOptions: NextAuthOptions = {\n  providers: [\n    GoogleProvider({\n      clientId: process.env.GOOGLE_CLIENT_ID!,\n      clientSecret: process.env.GOOGLE_CLIENT_SECRET!,\n    }),\n    GitHubProvider({\n      clientId: process.env.GITHUB_CLIENT_ID!,\n      clientSecret: process.env.GITHUB_CLIENT_SECRET!,\n    }),\n    CredentialsProvider({\n      name: \"credentials\",\n      credentials: {\n        email: { label: \"Email\", type: \"email\" },\n        password: { label: \"Password\", type: \"password\" },\n        name: { label: \"Name\", type: \"text\" },\n      },\n      async authorize(credentials) {\n        if (!credentials?.email || !credentials?.password) {\n          throw new Error(\"RequiredFields\");\n        }\n\n        try {\n          // Check if user exists\n          const existingUser = await prisma.user.findUnique({\n            where: { email: credentials.email },\n          });\n\n          if (existingUser) {\n            // User exists, verify password\n            if (!existingUser.passwordHash) {\n              console.error(\"User exists but no password hash found\");\n              throw new Error(\"InvalidLoginMethod\");\n            }\n\n              const isValidPassword = await bcrypt.compare(\n                credentials.password,\n                existingUser.passwordHash\n              );\n              \n            if (!isValidPassword) {\n              console.error(\"Invalid password for user:\", credentials.email);\n              throw new Error(\"InvalidCredentials\");\n            }\n\n                return {\n                  id: existingUser.id,\n                  email: existingUser.email,\n                  name: existingUser.name || \"\",\n                  role: existingUser.role,\n                };\n          } else {\n            // New user registration\n            if (!credentials.name) {\n              throw new Error(\"RequiredFields\");\n            }\n\n            // Validate password strength\n            if (credentials.password.length < 8) {\n              throw new Error(\"WeakPassword\");\n            }\n\n            const hasUpperCase = /[A-Z]/.test(credentials.password);\n            const hasLowerCase = /[a-z]/.test(credentials.password);\n            const hasNumbers = /\\d/.test(credentials.password);\n            const hasSpecialChar = /[!@#$%^&*(),.?\":{}|<>]/.test(credentials.password);\n\n            if (!hasUpperCase || !hasLowerCase || !hasNumbers || !hasSpecialChar) {\n              throw new Error(\"WeakPassword\");\n            }\n\n            const hashedPassword = await bcrypt.hash(credentials.password, 12);\n            \n            try {\n            const newUser = await prisma.user.create({\n              data: {\n                email: credentials.email,\n                name: credentials.name,\n                passwordHash: hashedPassword,\n                role: \"USER\",\n              },\n            });\n\n              console.log(\"New user created:\", newUser.email);\n\n            return {\n              id: newUser.id,\n              email: newUser.email,\n              name: newUser.name || \"\",\n              role: newUser.role,\n            };\n            } catch (error) {\n              if (error instanceof Prisma.PrismaClientKnownRequestError && error.code === 'P2002') {\n                throw new Error(\"EmailExists\");\n              }\n              throw error;\n            }\n          }\n        } catch (error) {\n          console.error(\"Auth error:\", error);\n          if (error instanceof Error) {\n            throw error;\n          }\n          throw new Error(\"AuthenticationFailed\");\n        }\n      },\n    }),\n  ],\n  secret: process.env.NEXTAUTH_SECRET,\n  session: {\n    strategy: \"jwt\",\n    maxAge: 30 * 24 * 60 * 60, // 30 days\n  },\n  callbacks: {\n    async signIn({ user, account }) {\n      console.log(\"Sign in attempt:\", { user: user.email, provider: account?.provider });\n      return true;\n    },\n    async session({ session, token }) {\n      if (session.user && token.sub) {\n        session.user.id = token.sub;\n        session.user.role = token.role || \"USER\";\n      }\n      return session;\n    },\n    async jwt({ token, user }) {\n      if (user) {\n        token.role = user.role;\n        token.sub = user.id;\n      }\n      return token;\n    },\n  },\n  pages: {\n    signIn: \"/login\",\n    error: \"/auth/error\",\n  },\n  debug: process.env.NODE_ENV === \"development\",\n};\n\nexport default NextAuth(authOptions);\n"],"names":[],"mappings":"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","debugId":null}}]
}